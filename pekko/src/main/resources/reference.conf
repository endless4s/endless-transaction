endless.transaction.pekko {
  # Parameters for retries in self-messaging i.e. the branch side-effect notifying the transaction entity
  # about the protocol phase result. It could be that the transaction gets rebalanced to another
  # node in the meantime, so we need to need to retry if the cluster doesn't respond in a timely
  # manner.
  retries {
    initial-delay = 5s  # initial delay before the first retry
    max-retries = 10    # maximum number of retries to avoid cascading failures
  }

  # Pekko's ask timeout for the transaction entity
  ask-timeout = 60s
}

pekko {
  actor {
    serializers {
      scalapb-serializer = "endless.runtime.pekko.protobuf.ScalaPbSerializer"
    }
    serialization-identifiers {
      "endless.runtime.pekko.protobuf.ScalaPbSerializer" = 424242
    }
    serialization-bindings {
      "endless.transaction.proto.events.TransactionEvent" = scalapb-serializer
    }
  }

  cluster {
    sharding {
      # guaranteed pending transaction recovery
      remember-entities = on
    }
  }
}